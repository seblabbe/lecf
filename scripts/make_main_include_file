#!/usr/bin/env python

FCT_DECLARATION_FILE = "src/mcf_algorithms.h"
ARRAY_FILE = "src/algorithms_array.c"

f1 = open(FCT_DECLARATION_FILE, "w")

import sys
import re

flags = re.MULTILINE

re_short_name = re.compile("^#define ALGORITHM_SHORT_NAME (?P<value>.*)$", flags)
re_full_name  = re.compile("^#define ALGORITHM_FULL_NAME (?P<value>.*)$", flags)
re_coords     = re.compile("^#define EXTREMAL_PTS (?P<value>.*)$", flags)
re_nb_pts     = re.compile("^#define NB_EXTREMAL_PTS (?P<value>.*)$", flags)

f1.write("/* Warning: this file is automatically generated from the content */\n")
f1.write("/* of \"algorithms/\". Running make will destroy it*/\n")
f1.write("#ifndef _ALL_ALGORITHMS_H\n")
f1.write("#define _ALL_ALGORITHMS_H\n")
f1.write("#include <stdio.h>\n")
f1.write("#include <stdlib.h>\n")
f1.write("#include <unistd.h>\n")
f1.write("#include <time.h>\n")
f1.write("#include <math.h>\n")
f1.write("#include <string.h>\n")
f1.write("\n")
f1.write("#include \"point3d.h\"\n")
f1.write("#include \"random.h\"\n")
f1.write("#include \"mcf_template.h\"\n")
f1.write("\n")

short_names = []
full_names = []
coords = []
nb_pts = []

for algo in sys.argv[1:]:
    f = open("src/algorithms/%s.c"%algo)
    t = f.read()
    f.close()

    v = re_short_name.search(t)
    if v is None: raise ValueError("did not find ALGORITHM_SHORT_NAME")
    short_name = v.groupdict()['value']
    short_names.append(short_name)

    v = re_full_name.search(t)
    if v is None: raise ValueError("did not find ALGORITHM_FULL_NAME")
    full_names.append(v.groupdict()['value'])

    v = re_coords.search(t)
    if v is None: raise ValueError("did not find EXTREMAL_PTS")
    coords.append(v.groupdict()['value'])

    v = re_nb_pts.search(t)
    if v is None: raise ValueError("did not find NB_EXTREMAL_PTS")
    nb_pts.append(v.groupdict()['value'])

    f1.write("void %s_one_step(Point3d);\n"%short_name)
    f1.write("bool %s_get_lexp(double *, double *, unsigned int);\n"%short_name)
    f1.write("Point3d %s_random_point(void);\n"%short_name)
    f1.write("\n")

f1.write("#endif\n")
f1.close()


f2 = open(ARRAY_FILE, "w")
f2.write("#define NB_ALGORITHMS %d\n"%(len(sys.argv)-1))
f2.write("\n")
f2.write("const char * algo_names[] = {%s};\n"%', '.join("\"%s\""%s for s in short_names))
f2.write("char * full_names[] = {%s};\n"%', '.join("\"%s\""%s for s in full_names))
f2.write("const get_lexp_type get_lexps[] = {%s};\n"%', '.join(s + '_get_lexp' for s in short_names))
f2.write("const one_step_type one_steps[] = {%s};\n"%', '.join(s + '_one_step'  for s in short_names))
f2.write("const random_point_type random_points[] = {%s};\n"%', '.join(s + '_random_point' for s in short_names))
f2.write("double extremal_pts[] = {%s};\n"%' ,'.join(coords))
f2.write("const unsigned int extremal_pts_nb[] = {%s};\n"%', '.join(nb_pts))
bounds = [0]
for i in nb_pts:
    bounds.append(bounds[-1] + int(i))
f2.write("const unsigned int extremal_pts_bounds[] = {%s};\n"%', '.join(map(str,bounds)))

f2.close()
